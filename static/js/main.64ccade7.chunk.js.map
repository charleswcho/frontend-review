{"version":3,"sources":["JavascriptReview.jsx","Leetcode.jsx","App.jsx","index.js"],"names":["scrollTo","id","document","querySelector","scrollIntoView","JavascriptReview","className","onClick","window","language","style","docco","LeetCode","TABS","App","useState","tabIdx","setTabIdx","map","tab","i","key","Leetcode","switchTab","rootElement","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.64ccade7.chunk.js","sourcesContent":["import React from 'react';\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\n\r\nconst scrollTo = (id) => {\r\n  document.querySelector(`#${id}`).scrollIntoView();\r\n};\r\n\r\nconst JavascriptReview = () => (\r\n  <>\r\n    <div className=\"back-to-top\" onClick={() => window.scrollTo(0, 0)}>\r\n      Top\r\n    </div>\r\n    <div id=\"index\" className=\"index\">\r\n      <h1>Index</h1>\r\n\r\n      <div onClick={() => scrollTo('values')}>1. Values</div>\r\n      <div onClick={() => scrollTo('functions')}>3. Functions</div>\r\n      <div onClick={() => scrollTo('data')}>4. Data</div>\r\n      <div onClick={() => scrollTo('higher-order-functions')}>\r\n        5. Higher Order Functions\r\n      </div>\r\n      <div onClick={() => scrollTo('objects')}>\r\n        6. The Secret Life of Objects\r\n      </div>\r\n      <div onClick={() => scrollTo('errors')}>8. Bugs and Errors</div>\r\n      <div onClick={() => scrollTo('regex')}>9. Regular Expressions</div>\r\n      <div onClick={() => scrollTo('async')}>11. Asynchronous Programming</div>\r\n      <div onClick={() => scrollTo('browser')}>\r\n        13. Javascript and the Browser\r\n      </div>\r\n      <div onClick={() => scrollTo('events')}>15. Handling Events</div>\r\n    </div>\r\n    <h1 id=\"values\">1. Values</h1>\r\n    <p>number, string, Boolean, undefined / null / NaN*</p>\r\n    <p>*Basic values are all immutatable and pass by value</p>\r\n    <p>*Can't update strings but can access them</p>\r\n    <br />\r\n    <p>short-circuit evaluation</p>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`console.log(null || 'user')    // → user\r\nconsole.log('Agnes' || 'user') // → Agnes\r\nconsole.log(false && 'user')   // → false`}\r\n    </SyntaxHighlighter>\r\n    <h1 id=\"functions\">3. Functions</h1>\r\n    <p>\r\n      <i>scope</i> - the part of the program which the binding is visible\r\n    </p>\r\n    <p>\r\n      <strong>var</strong> has function scoping\r\n    </p>\r\n    <p>\r\n      <strong>let</strong> and <strong>const</strong> have block scoping\r\n    </p>\r\n    <p>\r\n      Each block creates a new scope. Parameters and bindings declared in a\r\n      given scope are local and not visible from the outside. Bindings declared\r\n      with var behave differently—they end up in the nearest function scope or\r\n      the global scope.\r\n    </p>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`let x = 10;\r\nif (true) {\r\n  let y = 20;\r\n  var z = 30;\r\n  console.log(x + y + z);\r\n  // → 60\r\n}\r\n// y is not visible here\r\nconsole.log(x + z);\r\n// → 40}`}\r\n    </SyntaxHighlighter>\r\n    <h2>Declaration notation</h2>\r\n    <p>function variable binding does not hoist</p>\r\n    <p>\r\n      function <i>declaration</i> does\r\n    </p>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`// Define f to hold a function value\r\nconst f = function(a) {\r\n  console.log(a + 2);\r\n};\r\n\r\n// Declare g to be a function\r\nfunction g(a, b) {\r\n  return a * b * 3.5;\r\n}`}\r\n    </SyntaxHighlighter>\r\n    <h2>Closure</h2>\r\n    <p>\r\n      This feature—being able to reference a specific instance of a local\r\n      binding in an enclosing scope—is called closure. A function that\r\n      references bindings from local scopes around it is called a closure.\r\n    </p>\r\n    <h1 id=\"data\">4. Data</h1>\r\n    <h2>Rest Parameters</h2>\r\n    <p>Allow for a function to accept any number of arguments</p>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`function max(...numbers) {\r\n  let result = -Infinity;\r\n  for (let number of numbers) {\r\n    if (number > result) result = number;\r\n  }\r\n  return result;\r\n}\r\nconsole.log(max(4, 1, 9, -2));\r\n// → 9}`}\r\n    </SyntaxHighlighter>\r\n    <p>Can call a function with an array of arguments</p>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`let numbers = [5, 1, 7];\r\nconsole.log(max(...numbers));\r\n// → 7`}\r\n    </SyntaxHighlighter>\r\n    <h1 id=\"higher-order-functions\">5. Higher Order Functions</h1>\r\n    <p>\r\n      Functions that operate on other functions, either by taking them as\r\n      arguments or by returning them\r\n    </p>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`function greaterThan(n) {\r\n  return m => m > n;\r\n}\r\nlet greaterThan10 = greaterThan(10);\r\nconsole.log(greaterThan10(11));\r\n// → true`}\r\n    </SyntaxHighlighter>\r\n    <h2>Reduce</h2>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`arr.reduce(callback(accumulator, currentValue[, index[, array]]) {\r\n  // return result from executing something for accumulator or currentValue\r\n}[, initialValue]);\r\n\r\n[0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array) {\r\n  return accumulator + currentValue\r\n})`}\r\n    </SyntaxHighlighter>\r\n    <h2>Character codes</h2>\r\n    <p>http://www.asciitable.com/</p>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`const codes = '09AZaz';\r\n\r\nfor (let i = 0; i < codes.length; i++) {\r\n  console.log(codes.charCodeAt(i));\r\n}\r\n\r\n// 0-9 48-57\r\n// A-Z 65-90\r\n// a-z 97-122`}\r\n    </SyntaxHighlighter>\r\n    <h1 id=\"objects\">6. The Secret Life of Objects</h1>\r\n    <h2>prototype</h2>\r\n    <p>\r\n      A prototype is another object that is used as a fallback source of\r\n      properties. When an object gets a request for a property that it does not\r\n      have, its prototype will be searched for the property, then the\r\n      prototype’s prototype, and so on.\r\n    </p>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`console.log(Object.getPrototypeOf({}) ==\r\n            Object.prototype);\r\n// → true\r\nconsole.log(Object.getPrototypeOf(Object.prototype));\r\n// → null`}\r\n    </SyntaxHighlighter>\r\n    <p>\r\n      The new object’s prototype will be the object found in the prototype\r\n      property of the constructor.\r\n    </p>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`function Animal(age) {\r\n  this.age = age;\r\n}\r\n\r\nAnimal.prototype.eat = function() {\r\n  console.log('Eating');\r\n}\r\n\r\nfunction Snake(age, danger) {\r\n  Animal.call(this, age);\r\n  this.danger = danger;\r\n}\r\n\r\nSnake.prototype = new Animal;\r\n\r\nSnake.prototype.attack = function() {\r\n  console.log('Attacking! Danger', this.danger);\r\n}\r\n\r\nconst a = new Animal(5);\r\n\r\nconsole.log(a.age);\r\na.eat();\r\n\r\nconst s = new Snake(4, 10);\r\n\r\nconsole.log(s.age);\r\nconsole.log(s.danger);\r\ns.attack();\r\ns.eat();\r\n\r\nconsole.log(Snake.prototype)\r\n\r\n// 5\r\n// Eating\r\n// 4\r\n// 10\r\n// Attacking! Danger 10\r\n// Eating\r\n// Animal { a: undefined, attack: [Function] }`}\r\n    </SyntaxHighlighter>\r\n    <h2>Polymorphism</h2>\r\n    <p>\r\n      When a piece of code is written to work with objects that have a certain\r\n      interface—in this case, a toString method—any kind of object that happens\r\n      to support this interface can be plugged into the code, and it will just\r\n      work. This technique is called polymorphism. Polymorphic code can work\r\n      with values of different shapes, as long as they support the interface it\r\n      expects.\r\n    </p>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`const s = '123';\r\nconst arr = ['1', '2', '3'];\r\nconst m = new Map([['a', '1'], ['b', '2'], ['c', '3']]);\r\n\r\nfor (let c of s) {\r\n  console.log(c);\r\n}\r\n\r\nfor (let el of arr) {\r\n  console.log(el);\r\n}\r\n\r\nfor (let [_, val] of m) {\r\n  console.log(val);\r\n}\r\n\r\n// 1, 2, 3`}\r\n    </SyntaxHighlighter>\r\n    <h2>Iterators</h2>\r\n    <p>\r\n      The object given to a for/of loop is expected to be iterable. This means\r\n      it has a method named with the Symbol.iterator symbol (a symbol value\r\n      defined by the language, stored as a property of the Symbol function).\r\n      When called, that method should return an object that provides a second\r\n      interface, iterator. This is the actual thing that iterates. It has a next\r\n      method that returns the next result. That result should be an object with\r\n      a value property that provides the next value, if there is one, and a done\r\n      property, which should be true when there are no more results and false\r\n      otherwise.\r\n    </p>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`class MatrixIterator {\r\n  constructor(matrix) {\r\n    this.x = 0;\r\n    this.y = 0;\r\n    this.matrix = matrix;\r\n  }\r\n\r\n  next() {\r\n    if (this.y === this.matrix.height) return { done: true };\r\n\r\n    let value = {\r\n      x: this.x,\r\n      y: this.y,\r\n      value: this.matrix.get(this.x, this.y)\r\n    };\r\n\r\n    this.x++;\r\n\r\n    if (this.x === this.matrix.width) {\r\n      this.x = 0;\r\n      this.y++;\r\n    }\r\n    return { value, done: false };\r\n  }\r\n}`}\r\n    </SyntaxHighlighter>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`Matrix.prototype[Symbol.iterator] = function() {\r\n  return new MatrixIterator(this);\r\n};`}\r\n    </SyntaxHighlighter>\r\n    <h1 id=\"errors\">8. Bugs and Errors</h1>\r\n    <h2>Strict mode</h2>\r\n    <p>\r\n      Protects the global scope from write and makes the this binding undefined\r\n      in functions that are not called as methods. Strict mode does a few more\r\n      things. It disallows giving a function multiple parameters with the same\r\n      name and removes certain problematic language features entirely.\r\n    </p>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`function canYouSpotTheProblem() {\r\n  \"use strict\";\r\n  for (counter = 0; counter < 10; counter++) {\r\n    console.log(\"Happy happy\");\r\n  }\r\n}\r\n\r\ncanYouSpotTheProblem();\r\n// → ReferenceError: counter is not defined`}\r\n    </SyntaxHighlighter>\r\n    <h2>Simple testing setup</h2>\r\n    <p>Karma, Mocha lite</p>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`function test(label, body) {\r\n  if (!body()) console.log(\\`Failed: \\${label}\\`);\r\n}\r\n\r\ntest(\"convert Latin text to uppercase\", () => {\r\n  return \"hello\".toUpperCase() == \"HELLO\";\r\n});`}\r\n    </SyntaxHighlighter>\r\n    <h1 id=\"regex\">9. Regular Expressions</h1>\r\n    <h2>Character groups</h2>\r\n    <p>\r\n      /abc/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A sequence of characters\r\n      <br />\r\n      /[abc]/&nbsp;&nbsp;&nbsp;&nbsp; Any character from a set of characters\r\n      <br />\r\n      /[^abc]/&nbsp;&nbsp; Any character not in a set of characters\r\n      <br />\r\n      /[0-9]/&nbsp;&nbsp;&nbsp;&nbsp; Any character in a range of characters\r\n      <br />\r\n      \\d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Any\r\n      digit character\r\n      <br />\r\n      \\w&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; An\r\n      alphanumeric character (“word character”)\r\n      <br />\r\n      \\s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Any\r\n      whitespace character (space, tab, newline, and similar)\r\n      <br />\r\n      \\D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A\r\n      character that is not a digit\r\n      <br />\r\n      \\W&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A\r\n      nonalphanumeric character\r\n      <br />\r\n      \\S&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A\r\n      nonwhitespace character\r\n      <br />\r\n      .&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n      Any character except for newline\r\n      <br />\r\n    </p>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`console.log(/[0123456789]/.test(\"in 1992\"));\r\n// → true\r\nconsole.log(/[0-9]/.test(\"in 1992\"));\r\n// → true`}\r\n    </SyntaxHighlighter>\r\n    <h2>The Date Class</h2>\r\n    <p>\r\n      Timestamps are stored as the number of milliseconds since the start of\r\n      1970, in the UTC time zone. This follows a convention set by “Unix time”,\r\n      which was invented around that time. You can use negative numbers for\r\n      times before 1970. The getTime method on a date object returns this\r\n      number. It is big, as you can imagine.\r\n    </p>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`console.log(new Date(2013, 11, 19).getTime());\r\n// → 1387407600000\r\nconsole.log(new Date(1387407600000));\r\n// → Thu Dec 19 2013 00:00:00 GMT+0100 (CET)`}\r\n    </SyntaxHighlighter>\r\n    <h2>The Replace Method</h2>\r\n    <p>\r\n      String values have a replace method that can be used to replace part of\r\n      the string with another string.\r\n    </p>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`console.log(\"papa\".replace(\"p\", \"m\"));\r\n// → mapa`}\r\n    </SyntaxHighlighter>\r\n    <p>\r\n      The first argument can also be a regular expression, in which case the\r\n      first match of the regular expression is replaced. When a g option (for\r\n      global) is added to the regular expression, all matches in the string will\r\n      be replaced, not just the first.\r\n    </p>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`console.log(\"Borobudur\".replace(/[ou]/, \"a\"));\r\n// → Barobudur\r\nconsole.log(\"Borobudur\".replace(/[ou]/g, \"a\"));\r\n// → Barabadar`}\r\n    </SyntaxHighlighter>\r\n    <h1 id=\"async\">11. Asynchronous Programming</h1>\r\n    <h2>Promise</h2>\r\n    <p>Simple promise implementation</p>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`class MyPromise {\r\n  constructor(init) {\r\n    this.listeners = [];\r\n\r\n    init(this.resolve, this.reject);\r\n  }\r\n\r\n  resolve = (val) => {\r\n    let prevVal = val;\r\n\r\n    this.listeners.forEach(listener => {\r\n      prevVal = listener(prevVal);\r\n    });\r\n  }\r\n\r\n  reject = (err) => {\r\n    this.catchError(err);\r\n  }\r\n\r\n  then = (listener) => {\r\n    this.listeners.push(listener);\r\n\r\n    return this;\r\n  }\r\n\r\n  catchError = (err) => {\r\n    console.error(err);\r\n  }\r\n}`}\r\n    </SyntaxHighlighter>\r\n    <h2>Debounce</h2>\r\n    <p>Add a debounce to any function</p>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`function debounce(fn, ms) {\r\n  let timeout;\r\n\r\n  return (...args) => {\r\n    clearTimeout(timeout);\r\n\r\n    timeout = setTimeout(() => {\r\n      fn.apply(null, args);\r\n    }, ms);\r\n  }\r\n}`}\r\n    </SyntaxHighlighter>\r\n    <h1 id=\"async\">11. Asynchronous Programming</h1>\r\n    <h2>Promise</h2>\r\n    <p>Simple promise implementation</p>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`class MyPromise {\r\n  constructor(init) {\r\n    this.listeners = [];\r\n\r\n    init(this.resolve, this.reject);\r\n  }\r\n\r\n  resolve = (val) => {\r\n    let prevVal = val;\r\n\r\n    this.listeners.forEach(listener => {\r\n      prevVal = listener(prevVal);\r\n    });\r\n  }\r\n\r\n  reject = (err) => {\r\n    this.catchError(err);\r\n  }\r\n\r\n  then = (listener) => {\r\n    this.listeners.push(listener);\r\n\r\n    return this;\r\n  }\r\n\r\n  catchError = (err) => {\r\n    console.error(err);\r\n  }\r\n}`}\r\n    </SyntaxHighlighter>\r\n\r\n    <h1 id=\"browser\">13. Javascript and the Browser</h1>\r\n\r\n    <h2>The Web</h2>\r\n\r\n    <p>\r\n      To become part of the Web, all you need to do is connect a machine to the\r\n      Internet and have it listen on port 80 with the HTTP protocol so that\r\n      other computers can ask it for documents. Each document on the Web is\r\n      named by a Uniform Resource Locator (URL), which looks something like\r\n      this:\r\n    </p>\r\n\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`  http://eloquentjavascript.net/13_browser.html\r\n |      |                      |               |\r\n protocol       server               path`}\r\n    </SyntaxHighlighter>\r\n\r\n    <h2>HTML</h2>\r\n\r\n    <h3>URL encoding</h3>\r\n\r\n    <p>{'< → &lt;'}</p>\r\n    <p>{'> → &gt;'}</p>\r\n\r\n    <h1 id=\"events\">15. Handling Events</h1>\r\n\r\n    <h2>Creating and removing listeners</h2>\r\n\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`<button>Act-once button</button>\r\n<script>\r\n  let button = document.querySelector(\"button\");\r\n  function once() {\r\n    console.log(\"Done.\");\r\n    button.removeEventListener(\"click\", once);\r\n  }\r\n  button.addEventListener(\"click\", once);\r\n</script>`}\r\n    </SyntaxHighlighter>\r\n\r\n    <h2>Propagation (event bubbling)</h2>\r\n\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`<p>A paragraph with a <button>button</button>.</p>\r\n<script>\r\n  let para = document.querySelector(\"p\");\r\n  let button = document.querySelector(\"button\");\r\n  para.addEventListener(\"mousedown\", () => {\r\n    console.log(\"Handler for paragraph.\");\r\n  });\r\n  button.addEventListener(\"mousedown\", event => {\r\n    console.log(\"Handler for button.\");\r\n    if (event.button == 2) event.stopPropagation();\r\n  });\r\n</script>`}\r\n    </SyntaxHighlighter>\r\n\r\n    <h2>Delegation</h2>\r\n\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`<button>A</button>\r\n<button>B</button>\r\n<button>C</button>\r\n<script>\r\n  document.body.addEventListener(\"click\", event => {\r\n    if (event.target.nodeName == \"BUTTON\") {\r\n      console.log(\"Clicked\", event.target.textContent);\r\n    }\r\n  });\r\n</script>`}\r\n    </SyntaxHighlighter>\r\n\r\n    <h2>Events</h2>\r\n\r\n    <h3>Key Events</h3>\r\n\r\n    <ul>\r\n      <li>keydown</li>\r\n      <li>keyup</li>\r\n    </ul>\r\n\r\n    <h4>Related event properties</h4>\r\n\r\n    <ul>\r\n      <li>\r\n        <i>key </i>: holds a string that, for most keys, corresponds to the\r\n        thing that pressing that key would type.\r\n      </li>\r\n    </ul>\r\n\r\n    <h3>Pointer Events</h3>\r\n\r\n    <ul>\r\n      <li>click</li>\r\n      <li>dblclick</li>\r\n      <li>mousedown</li>\r\n      <li>mouseup</li>\r\n      <li>mousemove</li>\r\n    </ul>\r\n\r\n    <h4>Related event properties</h4>\r\n\r\n    <ul>\r\n      <li>\r\n        <i>clientX</i>: event’s coordinates (in pixels) relative to the top-left\r\n        corner of the window\r\n      </li>\r\n      <li>\r\n        <i>clientY</i>\r\n      </li>\r\n      <li>\r\n        <i>pageX</i>: relative to the top-left corner of the whole document\r\n        (which may be different when the window has been scrolled).\r\n      </li>\r\n      <li>\r\n        <i>pageY</i>\r\n      </li>\r\n    </ul>\r\n\r\n    <h3>Scroll Events</h3>\r\n\r\n    <ul>\r\n      <li>scroll</li>\r\n    </ul>\r\n\r\n    <h4>Related event properties</h4>\r\n\r\n    <ul>\r\n      <li>\r\n        <i>innerHeight</i>: the height of the window\r\n      </li>\r\n      <li>\r\n        <i>innerWidth</i>\r\n      </li>\r\n      <li>\r\n        <i>scrollHeight</i>: the total scrollable height\r\n      </li>\r\n      <li>\r\n        <i>scrollWidth</i>\r\n      </li>\r\n    </ul>\r\n\r\n    <h3>Focs Events</h3>\r\n\r\n    <ul>\r\n      <li>focus</li>\r\n      <li>blur</li>\r\n    </ul>\r\n\r\n    <h3>Load Events</h3>\r\n\r\n    <ul>\r\n      <li>load</li>\r\n      <li>beforeunload</li>\r\n    </ul>\r\n\r\n    <h2>Web workers</h2>\r\n\r\n    <p>squareworker.js</p>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`addEventListener(\"message\", event => {\r\n  postMessage(event.data * event.data);\r\n});`}\r\n    </SyntaxHighlighter>\r\n    <p>index.js</p>\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`let squareWorker = new Worker(\"code/squareworker.js\");\r\nsquareWorker.addEventListener(\"message\", event => {\r\n  console.log(\"The worker responded:\", event.data);\r\n});\r\nsquareWorker.postMessage(10);\r\nsquareWorker.postMessage(24);`}\r\n    </SyntaxHighlighter>\r\n  </>\r\n);\r\n\r\nexport default JavascriptReview;\r\n","import React from 'react';\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\n\r\nconst LeetCode = () => (\r\n  <>\r\n    <h1>Numbers</h1>\r\n\r\n    <h2>common techniques</h2>\r\n\r\n    <h3>iterate through number</h3>\r\n\r\n    <p>Save O(n) time instead of converting to string</p>\r\n\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`function printNumber(num) {\r\n    while (num >= 1) {\r\n      const remainder = num % 10;\r\n\r\n      console.log(remainder);\r\n\r\n      num = Math.floor(num / 10);\r\n    }\r\n}\r\n\r\nprintNumber(123); // 3, 2, 1`}\r\n    </SyntaxHighlighter>\r\n\r\n    <h1>Arrays</h1>\r\n\r\n    <h2>common techniques</h2>\r\n\r\n    <h3>calculate middle index</h3>\r\n\r\n    <p>Used commonly in binary search</p>\r\n\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`Math.floor((leftIdx + rightIdx) / 2);`}\r\n    </SyntaxHighlighter>\r\n\r\n    <h3>Constant space hashing</h3>\r\n\r\n    <p>Used in string matching (anagrams)</p>\r\n\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`const alpha = new Array(26);`}\r\n    </SyntaxHighlighter>\r\n\r\n    <h3>Search optimization with extra data</h3>\r\n\r\n    <p>\r\n      Used in search problems where you need an index. Saving the first\r\n      occurance idx saves another iteration\r\n    </p>\r\n\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`for (let i = 0; i < s.length; i++) {\r\n  const c = s[i];\r\n  \r\n  if (freq[c]) {\r\n    freq[c].count++;\r\n  } else {\r\n    freq[c] = { count: 1, i };\r\n  }\r\n}`}\r\n    </SyntaxHighlighter>\r\n\r\n    <h2>common methods</h2>\r\n\r\n    <h3>splice(start, deleteCount, insertionItem?)</h3>\r\n\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`let arrDeletedItems = array.splice(start[, deleteCount[, item1[, item2[, ...]]]])\r\n\r\nconst months = ['Jan', 'March', 'April', 'June'];\r\nmonths.splice(1, 0, 'Feb');\r\n// inserts at index 1\r\nconsole.log(months);\r\n// expected output: Array [\"Jan\", \"Feb\", \"March\", \"April\", \"June\"]`}\r\n    </SyntaxHighlighter>\r\n\r\n    <h1>Trees</h1>\r\n\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`class TreeNode {\r\n  constructor(val, left = null, right = null) {\r\n    this.val = val;\r\n    this.left = left;\r\n    this.right = right;\r\n  }\r\n}\r\n\r\n// Tree: a\r\n//     b   c\r\nconst tree = new TreeNode('a', new TreeNode('b'), new TreeNode('c'));`}\r\n    </SyntaxHighlighter>\r\n\r\n    <h2>common algorithms</h2>\r\n\r\n    <h3>Depth first search recursive</h3>\r\n\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`function DFS(root) {\r\n  if (!root) {\r\n    return;\r\n  }\r\n\r\n  DFS(root.left);\r\n\r\n  console.log(root.val);\r\n\r\n  DFS(root.right);\r\n};\r\n\r\nDFS(tree) // b, a, c`}\r\n    </SyntaxHighlighter>\r\n\r\n    <h3>Depth first search iterative (stack)</h3>\r\n\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`function DFS(root) {\r\n  const s = [];\r\n  let curr = root;\r\n\r\n  while (curr || s.length) {\r\n    while (curr) {\r\n      s.push(curr);\r\n      curr = curr.left;\r\n    }\r\n\r\n    curr = s.pop();\r\n\r\n    console.log(curr.val);\r\n\r\n    curr = curr.right;\r\n  }\r\n};\r\n\r\nDFS(tree) // b, a, c`}\r\n    </SyntaxHighlighter>\r\n\r\n    <h3>Breath first search with level tracking</h3>\r\n\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`// Tree: a\r\n//     b   c\r\nconst tree = new TreeNode('a', new TreeNode('b'), new TreeNode('c'));\r\n\r\nfunction BFS(root) {\r\n  const q = [root, null];\r\n  \r\n  while (q.length) {\r\n    const curr = q.shift();\r\n\r\n    if (!curr) {\r\n      if (!q.length) {\r\n        break;\r\n      }\r\n      \r\n      console.log('New Level');\r\n\r\n      q.push(null);\r\n      continue;\r\n    }\r\n\r\n    console.log(curr.val);\r\n    \r\n    if (curr.left) \r\n      q.push(curr.left);\r\n   \r\n    if (curr.right) \r\n      q.push(curr.right);\r\n  }\r\n};\r\n\r\nBFS(tree) // a, 'New Level', b, c`}\r\n    </SyntaxHighlighter>\r\n\r\n    <h3>Binary search</h3>\r\n\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`// Tree: 2\r\n//     1   3\r\nconst tree = new TreeNode(2, new TreeNode(1), new TreeNode(3));\r\n\r\nfunction search(root, val) {\r\n  let result = null;\r\n  \r\n  function bSearch(node) {\r\n    if (!node) {\r\n      return;\r\n    }\r\n    \r\n    if (node.val < val) {\r\n      bSearch(node.right);\r\n    } else if (node.val > val) {\r\n      bSearch(node.left);\r\n    } else {\r\n      result = node;\r\n      return;\r\n    }\r\n  }\r\n  \r\n  bSearch(root);\r\n  \r\n  return tree;\r\n};\r\n\r\nsearch(tree, 2) // TreeNode(val = 2)`}\r\n    </SyntaxHighlighter>\r\n\r\n    <h1>Graphs</h1>\r\n\r\n    <h2>common algorithms</h2>\r\n\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {`// Agacency List: a → b → c\r\n\r\nconst list = {\r\n  a: ['b'],\r\n  b: ['c'],\r\n}\r\n\r\nfunction BFS(list) {\r\n  const firstKey = Object.keys(list)[0];\r\n  const queue = [firstKey];\r\n\r\n  while (queue.length) {\r\n    const currVertex = queue.shift();\r\n\r\n    console.log(currVertex);\r\n\r\n    if (list[currVertex]) {\r\n      list[currVertex].forEach(vertex => {\r\n        queue.push(vertex);\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nBFS(list) // a, b, c`}\r\n    </SyntaxHighlighter>\r\n  </>\r\n);\r\n\r\nexport default LeetCode;\r\n","import React, { useState } from 'react';\nimport './styles.sass';\nimport 'typeface-roboto';\n\nimport JavascriptReview from './JavascriptReview';\nimport Leetcode from './Leetcode';\n\nconst TABS = ['Javascript Review', 'Leetcode', 'React'];\n\nconst switchTab = (i) => {\n  switch (i) {\n    case 0:\n      return <JavascriptReview />;\n    case 1:\n      return <Leetcode />;\n    case 2:\n      return (\n        <div>\n          <h1>React</h1>\n        </div>\n      );\n    default:\n      return <JavascriptReview />;\n  }\n};\n\nexport default function App() {\n  const [tabIdx, setTabIdx] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <div className=\"tabs\">\n        <div className=\"actions\">\n          {TABS.map((tab, i) => (\n            <button\n              key={i}\n              className={tabIdx === i ? 'selected' : ''}\n              onClick={() => setTabIdx(i)}\n            >\n              {tab}\n            </button>\n          ))}\n        </div>\n\n        <div className=\"selected-tab\">{switchTab(tabIdx)}</div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}